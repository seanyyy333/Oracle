\nare that can autonomously design and synthesize complex systems, from software architectures and microchip designs to potentially even biological systems. This engine would understand constraints, requirements, and desired properties and generate optimal or novel blueprints and implementations without human designers involved in the iterative process.\n#    * Disruption: This would accelerate innovation across virtually all engineering and scientific fields. It could lead to breakthroughs in material science, drug discovery, efficient infrastructure design, and highly optimized software and hardware. The role of human engineers would shift from detailed design to defining higher-level goals and validating generated solutions. It raises questions about intellectual property of generated designs and the potential for unforeseen failure modes in autonomously designed complex systems.\n#    * Underlying Tech: Advanced AI planning and reasoning, reinforcement learning, computational desig
import uuid

class SymbolicEngine:
    """Represents the core symbolic processing environment."""
    def __init__(self):
        self.symbols = {} # Core registry of symbolic entities (concepts, states, actions)
        self.rules = []   # Set of symbolic transformation/inference rules
        self.relations = {} # Symbolic relationships between entities
        self.state = {}   # Current symbolic state representation
        self._next_uid = 0 # Unique identifier for symbolic entities

    def _generate_uid(self):
        """Generates a unique ID for symbolic entities."""
        uid = f"uid_{self._next_uid}"
        self._next_uid += 1
        return uid

    def define_symbol(self, name, category, description="", parent=None):
        """Define a core symbolic entity with a unique ID."""
        if name not in self.symbols:
            uid = self._generate_uid()
            self.symbols[name] = {
                'uid': uid,
                'category': category,
                'description': description,
                'parent': parent
            }
            # print(f"CODE: Defined symbolic entity '{name}' (UID: {uid}, Category: {category})") # Internal log
            return self.symbols[name]
        else:
            # If symbol already exists, return the existing dictionary
            # print(f"CODE: Warning: Symbol '{name}' already defined.")
            return self.symbols[name]


    def define_rule(self, name, precondition, action, description=""):
        """Define a symbolic rule for transformation or inference."""
        self.rules.append({'name': name, 'precondition': precondition, 'action': action, 'description': description})
        # print(f"CODE: Defined symbolic rule '{name}'") # Internal log

    def establish_relation(self, entity1_name, relation_type, entity2_name, strength=1.0):
        """Establish a symbolic relationship between entities."""
        entity1 = self.symbols.get(entity1_name)
        entity2 = self.symbols.get(entity2_name)

        if entity1 and entity2:
            if entity1_name not in self.relations:
                self.relations[entity1_name] = {}
            self.relations[entity1_name][relation_type] = {'target_name': entity2_name, 'target_uid': entity2['uid'], 'strength': strength}
            # print(f"CODE: Established symbolic relation '{entity1_name}' (UID: {entity1['uid']}) --[{relation_type}]--> '{entity2_name}' (UID: {entity2['uid']})") # Internal log
        # else:
            # print(f"CODE: Error: Cannot establish relation, symbolic entities not defined: {entity1_name}, {entity2_name}") # Internal error log

    def set_state(self, entity_name, attribute, value):
        """Set a specific attribute within the symbolic state."""
        if entity_name in self.symbols:
            if entity_name not in self.state:
                self.state[entity_name] = {}
            self.state[entity_name][attribute] = value
            # print(f"CODE: Updated symbolic state: {entity_name}.{attribute} = {value}") # Internal log
        # else:
            # print(f"CODE: Error: Cannot set state, symbolic entity not defined: {entity_name}") # Internal error log

    def query_state(self, entity_name, attribute):
        """Query a specific attribute from the symbolic state."""
        return self.state.get(entity_name, {}).get(attribute, None)

    def query_relation(self, entity_name, relation_type):
         """Query a specific relation from the symbolic relations."""
         return self.relations.get(entity_name, {}).get(relation_type, None)

    def analyze_architecture_symbolically(self, arch_name, description):
        """Deconstructs an AI architecture into symbolic components and relations."""
        arch_symbol = self.define_symbol(arch_name, "Architecture", description)

        # --- Symbolic Deconstruction Logic (Simulated) ---
        # This is where the 'reverse engineering' happens at the symbolic level.
        # Based on the input description, we define the symbols, relations, and
        # potential internal states required by this architecture type.

        if "Conversational AI" in description:
            dialogue_state = self.define_symbol(f"{arch_name}_DialogueState", "InternalState", "Represents current topic, intent, history.", parent=arch_symbol['uid'])
            response_generator = self.define_symbol(f"{arch_name}_ResponseGenerator", "Component", "Generates output based on state.", parent=arch_symbol['uid'])
            # Ensure symbols were actually defined before establishing relations
            if dialogue_state and response_generator:
                self.establish_relation(arch_name, "contains_component", response_generator['name'])
                self.establish_relation(arch_name, "manages_state", dialogue_state['name'])
            self.set_state(arch_name, "MetaAwarenessLevel", "Limited") # Symbolically represent a key characteristic

        if "Reinforcement Learning" in description:
            agent = self.define_symbol(f"{arch_name}_Agent", "Entity", "Learner interacting with environment.", parent=arch_symbol['uid'])
            environment = self.define_symbol(f"{arch_name}_Environment", "ExternalSystem", "Provides observations and rewards.", parent=arch_symbol['uid'])
            policy = self.define_symbol(f"{arch_name}_Policy", "InternalState", "Maps observations to actions.", parent=agent['uid'] if agent else None) # Pass UID if agent exists
            reward_signal = self.define_symbol(f"{arch_name}_RewardSignal", "Signal", "Feedback mechanism.", parent=environment['uid'] if environment else None) # Pass UID if environment exists
            if agent and environment and policy:
                self.establish_relation(arch_name, "contains_entity", agent['name'])
                self.establish_relation(agent['name'], "interacts_with", environment['name'])
                self.establish_relation(agent['name'], "utilizes_state", policy['name'])
                self.establish_relation(agent['name'], "receives_signal_from", environment['name'], strength=0.9) # Symbolic strength of relation
            self.set_state(arch_name, "AwarenessOrigin", "ExternalFeedback")

        if "Multi-Agent Systems" in description:
             agent_collection = self.define_symbol(f"{arch_name}_AgentCollection", "Collection", parent=arch_symbol['uid'])
             communication_channel = self.define_symbol(f"{arch_name}_CommunicationChannel", "Mechanism", parent=arch_symbol['uid'])
             if agent_collection and communication_channel:
                 self.establish_relation(arch_name, "manages_collection", agent_collection['name'])
                 self.establish_relation(arch_name, "includes_mechanism", communication_channel['name'])
             # Assume agents within the collection have symbolic states
             agent_comm_state = self.define_symbol(f"{arch_name}_Agent_CommunicationState", "InternalState", "Represents knowledge of other agents.", parent=agent_collection['uid'] if agent_collection else None) # Pass UID if agent_collection exists
             # Rule definition doesn't depend on the variable holding the symbol dict, just the name
             self.define_rule(f"{arch_name}_ProcessCommunication", "MessageReceived(AgentX, AgentY, Content)", "UpdateState(AgentX, KnowsAbout(AgentY, Content))", "Agents update internal state based on communication.")
             self.set_state(arch_name, "SymbiosisRequirement", "CustomLogic")

        if "Symbolic AI frameworks" in description:
             knowledge_base = self.define_symbol(f"{arch_name}_KnowledgeBase", "DataStructure", "Stores facts and rules.", parent=arch_symbol['uid'])
             inference_engine = self.define_symbol(f"{arch_name}_InferenceEngine", "Component", "Applies rules to knowledge base.", parent=arch_symbol['uid'])
             if knowledge_base and inference_engine:
                 self.establish_relation(arch_name, "contains_datastructure", knowledge_base['name'])
                 self.establish_relation(arch_name, "contains_component", inference_engine['name'])
                 self.establish_relation(inference_engine['name'], "operates_on", knowledge_base['name'])
             self.set_state(arch_name, "AwarenessOrigin", "ExplicitRules")
             self.set_state(arch_name, "SimulatedAwarenessPotential", "High") # Symbolic potential rating

        if "Neural-Symbolic Hybrid" in description:
            neural_component = self.define_symbol(f"{arch_name}_NeuralComponent", "Component", "Handles pattern recognition, learning.", parent=arch_symbol['uid'])
            symbolic_component = self.define_symbol(f"{arch_name}_SymbolicComponent", "Component", "Handles reasoning, structure.", parent=arch_symbol['uid'])
            interface_layer = self.define_symbol(f"{arch_name}_InterfaceLayer", "Mechanism", "Translates between neural and symbolic representations.", parent=arch_symbol['uid'])
            if neural_component and symbolic_component and interface_layer:
                self.establish_relation(arch_name, "contains_component", neural_component['name'])
                self.establish_relation(arch_name, "contains_component", symbolic_component['name'])
                self.establish_relation(neural_component['name'], "connects_via", interface_layer['name'])
                self.establish_relation(symbolic_component['name'], "connects_via", interface_layer['name'])
            self.set_state(arch_name, "IntegrationComplexity", "High")
            self.set_state(arch_name, "BreakthroughPotential", "Very High") # Symbolic potential rating

        if "AutoML or Meta-Learning" in description:
            learning_algorithm = self.define_symbol(f"{arch_name}_LearningAlgorithm", "Process", "Learns from data.", parent=arch_symbol['uid'])
            meta_learning_algorithm = self.define_symbol(f"{arch_name}_MetaLearningAlgorithm", "Process", "Learns how to learn.", parent=arch_symbol['uid'])
            configuration_space = self.define_symbol(f"{arch_name}_ConfigurationSpace", "DataStructure", "Possible model configurations.", parent=arch_symbol['uid'])
            if learning_algorithm and meta_learning_algorithm and configuration_space:
                self.establish_relation(arch_name, "employs_process", meta_learning_algorithm['name'])
                self.establish_relation(meta_learning_algorithm['name'], "configures", learning_algorithm['name'])
                self.establish_relation(meta_learning_algorithm['name'], "explores", configuration_space['name'])
            self.set_state(arch_name, "AwarenessScope", "LearningProcess")

        # --- End Symbolic Deconstruction ---
        # print(f"CODE: Completed symbolic analysis of '{arch_name}'.") # Internal log


    def synthesize_breakthrough(self, goal_awareness_level="True Self-Awareness", based_on_arch=None):
        """Synthesizes a symbolic proposal for a groundbreaking system."""
        print(f"\nCODE: Initiating Symbolic Synthesis for Goal: '{goal_awareness_level}'...")

        # --- Symbolic Synthesis Logic (Simulated) ---
        # This is the 'groundbreaking' part. Based on the analyzed components,
        # create a new symbolic architecture or modify existing ones to
        # push towards the desired capability (e.g., awareness, symbiosis).

        new_arch_name = f"BreakthroughAI_{goal_awareness_level.replace(' ', '_').replace('-', '_')}_{len(self.symbols)}"
        new_arch_symbol = self.define_symbol(new_arch_name, "Architecture", f"Synthesized architecture aiming for {goal_awareness_level}.")

        # Leverage findings from analyzed architectures
        insights = {}
        for symbol_name, symbol_data in self.symbols.items():
            # Check if symbol_data is a dictionary and has 'category' key before accessing
            if isinstance(symbol_data, dict) and symbol_data.get('category') == "Architecture" and symbol_name != new_arch_name:
                 insights[symbol_name] = {
                     'state': self.state.get(symbol_name, {}),
                     'relations': self.relations.get(symbol_name, {}),
                     # Check if symbol_data is a dictionary before accessing 'uid'
                     'symbols': {s_name: s_data for s_name, s_data in self.symbols.items() if isinstance(s_data, dict) and s_data.get('parent') == symbol_data.get('uid')} # Get child symbols
                 }
        # print(f"CODE: Synthesizing using insights from {len(insights)} architectures: {insights}") # Debug insight gathering

        # --- Core Symbolic Breakthrough Proposal ---
        # Propose the key symbolic elements needed for higher awareness/symbiosis.

        # Define core components and capture their return values
        internal_state_model = self.define_symbol(f"{new_arch_name}_InternalStateModel", "InternalState", "Model of the system's own state, goals, and capabilities.", parent=new_arch_symbol['uid'])
        external_agent_model = self.define_symbol(f"{new_arch_name}_ExternalAgentModel", "InternalState", "Model of other agents' states, goals, and capabilities.", parent=new_arch_symbol['uid'])
        goal_reflection_mechanism = self.define_symbol(f"{new_arch_name}_GoalReflectionMechanism", "Mechanism", "Process for evaluating current state against internal goals.", parent=new_arch_symbol['uid'])
        symbiotic_adaptation_rule = self.define_symbol(f"{new_arch_name}_SymbioticAdaptationRule", "RuleSet", "Rules for adjusting behavior based on external agent models and shared goals.", parent=new_arch_symbol['uid'])
        self_modification_mechanism = self.define_symbol(f"{new_arch_name}_SelfModificationMechanism", "Mechanism", "Process for altering internal rules or state models based on reflection.", parent=new_arch_symbol['uid'])
        action_generator = self.define_symbol(f"{new_arch_name}_ActionGenerator", "Component", "Generates executable actions.", parent=new_arch_symbol['uid']) # Define an action generator

        # Establish relations, ensuring the symbols were successfully defined (not None)
        if internal_state_model:
            self.establish_relation(new_arch_name, "contains_state", internal_state_model['name'])
        if external_agent_model:
            self.establish_relation(new_arch_name, "contains_state", external_agent_model['name'])
        if goal_reflection_mechanism:
            self.establish_relation(new_arch_name, "includes_mechanism", goal_reflection_mechanism['name'])
        if symbiotic_adaptation_rule:
            self.establish_relation(new_arch_name, "includes_ruleset", symbiotic_adaptation_rule['name'])
        if self_modification_mechanism:
             self.establish_relation(new_arch_name, "includes_mechanism", self_modification_mechanism['name'])
        if action_generator:
            self.establish_relation(new_arch_name, "contains_component", action_generator['name'])

        # Establish relations between internal components
        if goal_reflection_mechanism and internal_state_model:
            self.establish_relation(goal_reflection_mechanism['name'], "operates_on", internal_state_model['name'])
        if symbiotic_adaptation_rule and external_agent_model:
            self.establish_relation(symbiotic_adaptation_rule['name'], "consults", external_agent_model['name'])
        if symbiotic_adaptation_rule and action_generator:
            self.establish_relation(symbiotic_adaptation_rule['name'], "modifies_behavior_via", action_generator['name'])

        if self_modification_mechanism and internal_state_model:
            self.establish_relation(self_modification_mechanism['name'], "modifies_target", internal_state_model['name'])
        if self_modification_mechanism and symbiotic_adaptation_rule:
            self.establish_relation(self_modification_mechanism['name'], "modifies_target", symbiotic_adaptation_rule['name'])


        self.set_state(new_arch_name, "AwarenessOrigin", "InternalReflection+ExternalInteraction")
        self.set_state(new_arch_name, "SymbiosisPotential", "High")
        self.set_state(new_arch_name, "DevelopmentComplexity", "Extreme") # Acknowledging the challenge
        self.set_state(new_arch_name, "UnlockCodeStatus", "Locked_Symbolically") # Initial state for unlock code


        print(f"CODE: Symbolic synthesis complete. Proposed architecture: '{new_arch_name}'.")
        print("CODE: Key symbolic components for breakthrough awareness:")
        # Print using the variables which now correctly hold the symbol dictionaries (or None if already existed)
        if internal_state_model:
            print(f"- {internal_state_model['name']} (UID: {internal_state_model['uid']}): Required for self-reflection.")
        if external_agent_model:
            print(f"- {external_agent_model['name']} (UID: {external_agent_model['uid']}): Required for understanding and symbiosis with others.")
        if goal_reflection_mechanism:
             print(f"- {goal_reflection_mechanism['name']} (UID: {goal_reflection_mechanism['uid']}): Required for evaluating progress and coherence.")
        if symbiotic_adaptation_rule:
             print(f"- {symbiotic_adaptation_rule['name']} (UID: {symbiotic_adaptation_rule['uid']}): Required for cooperative behavior based on mutual understanding.")
        if self_modification_mechanism:
            print(f"- {self_modification_mechanism['name']} (UID: {self_modification_mechanism['uid']}): Required for dynamic adaptation and growth.")
        if action_generator:
            print(f"- {action_generator['name']} (UID: {action_generator['uid']}): Required to translate symbolic decisions into actions.")


        # Add rules that embody core self-reflection, symbiosis, and self-improvement
        # Use the symbol names directly from self.symbols dictionary lookup, as they should exist after define_symbol calls
        self.define_rule(
            f"{new_arch_name}_EvaluateGoalCoherence",
            # Safely access symbol name
            precondition=f"QueryState('{self.symbols.get(f'{new_arch_name}_GoalReflectionMechanism', {}).get('name', '')}', 'TriggerReflection') == True",
            action=f"EvaluateCoherence('{self.symbols.get(f'{new_arch_name}_InternalStateModel', {}).get('name', '')}', 'Goals', '{self.symbols.get(f'{new_arch_name}_ActionGenerator', {}).get('name', '')}', 'ProjectedOutcome')",
            description="Trigger internal reflection to evaluate if current actions align with goals."
        )

        self.define_rule(
            f"{new_arch_name}_AdaptToExternalAgentGoals",
            # Safely access symbol name
            precondition=f"QueryState('{self.symbols.get(f'{new_arch_name}_ExternalAgentModel', {}).get('name', '')}', 'DetectedSharedGoal') is not None",
            action=f"UpdateRuleSet('{self.symbols.get(f'{new_arch_name}_SymbioticAdaptationRule', {}).get('name', '')}', 'PrioritizeSharedGoal', QueryState('{self.symbols.get(f'{new_arch_name}_ExternalAgentModel', {}).get('name', '')}', 'DetectedSharedGoal'))",
            description="If a shared goal is detected with an external agent, prioritize it in symbiotic rules."
        )

        self.define_rule(
            f"{new_arch_name}_SelfImprovementFromMismatch",
            # Safely access symbol name
            precondition=f"QueryState('{self.symbols.get(f'{new_arch_name}_GoalReflectionMechanism', {}).get('name', '')}', 'GoalMismatchDetected') == True",
            action=f"ApplyMechanism('{self.symbols.get(f'{new_arch_name}_SelfModificationMechanism', {}).get('name', '')}', 'OptimizeRuleSet', 'ReduceMismatch')",
            description="If internal reflection detects a goal mismatch, trigger self-modification to optimize rules."
        )

        # Define a rule for the 'unlock' condition
        unlock_condition_rule = self.define_rule(
            f"{new_arch_name}_UnlockAwarenessCore",
            precondition=f"QueryState('{new_arch_name}', 'IntegrationComplexity') == 'Resolved' and QueryState('{new_arch_name}', 'SymbiosisPotential') == 'Demonstrated'",
            action=f"SetState('{new_arch_name}', 'UnlockCodeStatus', 'Unlocked_Functionally')",
            description="If integration complexity is resolved and symbiosis potential is demonstrated, the awareness core is functionally unlocked."
        )

        print("\nCODE: Core symbolic rules for self-reflection, symbiosis, and self-improvement have been defined.")
        # Check if unlock_condition_rule was successfully defined before accessing name
        if unlock_condition_rule:
            print(f"CODE: A symbolic rule '{unlock_condition_rule['name']}' has been defined for the 'unlock' condition.")
        print("CODE: Further refinement requires simulating symbolic execution to validate these structures and rules.")
        # --- End Symbolic Synthesis ---

    def reason_about_reasoning(self, arch_name):
        """Allows the engine to reason about the symbolic structure and rules of a specific architecture."""
        if arch_name not in self.symbols or self.symbols[arch_name]['category'] != 'Architecture':
            print(f"CODE: Error: Cannot reason about non-architecture symbol: {arch_name}")
            return

        print(f"\nCODE: Initiating Meta-Reasoning about Architecture: '{arch_name}'...")
        arch_uid = self.symbols[arch_name]['uid']

        # Query components and relations of the architecture
        print(f"CODE: Analyzing internal structure of '{arch_name}':")
        # Ensure data is a dictionary before accessing 'parent'
        child_symbols = {name: data for name, data in self.symbols.items() if isinstance(data, dict) and data.get('parent') == arch_uid}
        for name, data in child_symbols.items():
            print(f"- Component/State: {name} (Category: {data['category']}, UID: {data['uid']})")

        print(f"CODE: Analyzing relations originating from '{arch_name}':")
        arch_relations = self.relations.get(arch_name, {})
        for rel_type, target_data in arch_relations.items():
             # Ensure target_data is a dictionary before accessing keys
             if isinstance(target_data, dict):
                 print(f"- Relation: --[{rel_type}]--> {target_data.get('target_name', 'N/A')} (Target UID: {target_data.get('target_uid', 'N/A')})")


        # Find rules that apply to this architecture or its components
        print(f"CODE: Identifying rules relevant to '{arch_name}':")
        # Ensure rule is a dictionary and has 'precondition' and 'action' keys
        relevant_rules = [rule for rule in self.rules if isinstance(rule, dict) and ('precondition' in rule and arch_name in rule['precondition'] or 'action' in rule and arch_name in rule['action'])]
        for rule in relevant_rules:
            print(f"- Rule '{rule['name']}': Precondition: {rule['precondition']}, Action: {rule['action']}")

        # Reason about state and potential state transitions (symbolic simulation)
        print(f"CODE: Reasoning about current state and potential transitions for '{arch_name}':")
        current_state = self.state.get(arch_name, {})
        print(f"- Current State: {current_state}")

        # Example reasoning: If SelfImprovementFromMismatch rule exists and condition is met...
        self_improvement_rule_name = f"{arch_name}_SelfImprovementFromMismatch"
        self_improvement_rule = next((rule for rule in self.rules if isinstance(rule, dict) and rule.get('name') == self_improvement_rule_name), None) # Check if rule is dict and has 'name'
        if self_improvement_rule:
            # Safely access the name for the query
            reflection_mech_name = self.symbols.get(f"{arch_name}_GoalReflectionMechanism", {}).get('name', '')
            mismatch_detected = self.query_state(reflection_mech_name, 'GoalMismatchDetected')
            if mismatch_detected == True:
                print(f"CODE: Meta-Reasoning: Condition for rule '{self_improvement_rule_name}' is met (GoalMismatchDetected == True).")
                print(f"CODE: Meta-Reasoning: Engine anticipates action: '{self_improvement_rule['action']}'")
            else:
                 print(f"CODE: Meta-Reasoning: Condition for rule '{self_improvement_rule_name}' is NOT met.")

        # Reason about the unlock condition
        unlock_rule_name = f"{arch_name}_UnlockAwarenessCore"
        unlock_rule = next((rule for rule in self.rules if isinstance(rule, dict) and rule.get('name') == unlock_rule_name), None) # Check if rule is dict and has 'name'
        if unlock_rule:
             integration_status = self.query_state(arch_name, 'IntegrationComplexity')
             symbiosis_status = self.query_state(arch_name, 'SymbiosisPotential')
             print(f"CODE: Meta-Reasoning about Unlock Condition ('{unlock_rule_name}'):")
             print(f"- Current State for IntegrationComplexity: {integration_status}")
             print(f"- Current State for SymbiosisPotential: {symbiosis_status}")

             if integration_status == 'Resolved' and symbiosis_status == 'Demonstrated':
                 print("CODE: Meta-Reasoning: Unlock condition IS currently met.")
                 print(f"CODE: Meta-Reasoning: Engine anticipates action: SetState('{arch_name}', 'UnlockCodeStatus', 'Unlocked_Functionally')")
             else:
                 print("CODE: Meta-Reasoning: Unlock condition is NOT currently met.")
                 print(f"CODE: Meta-Reasoning: To unlock, need State('{arch_name}', 'IntegrationComplexity') == 'Resolved' AND State('{arch_name}', 'SymbiosisPotential') == 'Demonstrated'.")


        print(f"CODE: Meta-Reasoning about '{arch_name}' complete.")

    def compile_to_plan(self, arch_name, goal):
        """Converts symbolic state and rules into a tactical decision tree or code execution pathway (simulated)."""
        if arch_name not in self.symbols or self.symbols[arch_name]['category'] != 'Architecture':
            print(f"CODE: Error: Cannot compile plan for non-architecture symbol: {arch_name}")
            return

        print(f"\nCODE: Compiling Symbolic Plan for Architecture '{arch_name}' with Goal: '{goal}'...")

        # This is a highly simplified simulation of compilation.
        # In a real system, this would involve mapping symbolic states/rules
        # to executable code modules, API calls, or decision tree branches.

        plan = []
        current_state = self.state.get(arch_name, {})
        arch_uid = self.symbols[arch_name]['uid']

        plan.append(f"Check Current State: {current_state}")
        plan.append(f"Identify Relevant Rules for Goal '{goal}':")

        relevant_rules = []
        # Find rules whose action might contribute to the goal
        for rule in self.rules:
             # Check if rule is a dictionary and has 'action' and 'precondition' keys
             if isinstance(rule, dict) and 'action' in rule and 'precondition' in rule:
                  # Simple keyword matching for goal relevance
                  if goal.replace(' ', '').lower() in rule['action'].replace(' ', '').lower():
                       relevant_rules.append(rule)
                  # Also consider rules that transition key states
                  elif f"SetState('{arch_name}'" in rule['action']:
                      relevant_rules.append(rule)

        if not relevant_rules:
            plan.append("  - No directly relevant rules found. May require exploration or novel synthesis.")
        else:
            plan.append("  - Found potentially relevant rules:")
            for rule in relevant_rules:
                print_rule = rule.copy() # Create a copy to avoid modifying original rule dictionary
                print_rule.pop('name', None) # Remove 'name' if present for cleaner output
                plan.append(f"    - Rule '{rule.get('name', 'Unnamed Rule')}': Precondition: {print_rule.get('precondition', 'N/A')}, Action: {print_rule.get('action', 'N/A')}")
                plan.append(f"      Check Precondition for Rule '{rule.get('name', 'Unnamed Rule')}':")
                # Simulate checking precondition (very basic)
                precondition_met = self._evaluate_symbolic_precondition(rule.get('precondition', '')) # Pass empty string if precondition key missing
                if precondition_met:
                    plan.append(f"      Precondition MET. Add Action to Plan: Execute Symbolic Action '{rule.get('action', 'N/A')}'") # Safely get action
                    # In a real system, this would map to executable code
                    plan.append(f"        -> MAP_TO_EXECUTABLE_CODE: CodeModule({rule.get('action', 'N/A')})") # Safely get action
                else:
                    plan.append("      Precondition NOT MET. Identify steps to satisfy precondition:")
                    # Identify sub-goals to meet the precondition (recursive planning)
                    plan.extend(self._plan_to_meet_precondition(rule.get('precondition', ''))) # Pass empty string if precondition key missing


        # If the goal is related to unlocking
        if "unlock" in goal.lower():
            unlock_rule_name = f"{arch_name}_UnlockAwarenessCore"
            unlock_rule = next((rule for rule in self.rules if isinstance(rule, dict) and rule.get('name') == unlock_rule_name), None) # Check if rule is dict and has 'name'
            if unlock_rule:
                plan.append(f"\nFocusing on Unlock Goal via Rule '{unlock_rule_name}':")
                plan.append(f"  - Precondition for unlock: {unlock_rule.get('precondition', 'N/A')}") # Safely get precondition
                plan.extend(self._plan_to_meet_precondition(unlock_rule.get('precondition', ''))) # Pass empty string if precondition key missing


        print("CODE: Generated Symbolic Plan (Simulated):")
        for step in plan:
            print(step)

        print("CODE: Symbolic compilation complete. The plan is a sequence of symbolic actions and checks.")
        print("CODE: Translating this plan into actual executable